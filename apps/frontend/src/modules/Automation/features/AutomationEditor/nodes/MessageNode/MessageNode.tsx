import { Node, NodeProps } from '@xyflow/react';

import { EditorNode } from '../../ui/EditorNode';
import { Button, Group, Image, Text } from '@mantine/core';

type MessageNode = Node<{ label: string }, 'message'>;

export function MessageNode({ data }: NodeProps<MessageNode>) {
  return (
    <EditorNode>
      <EditorNode.InputHandle text="Send message" />
      <EditorNode.BodyContainer>
        <Group gap="xs">
          <Image
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-8.png"
            height={140}
            alt="Norway"
          />
          <Text fz="xs" lh="xs">
            –ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –ö–∞—Ç—è –ö–∞–º–µ–Ω–µ—Ü–∫–∏.{' '}
          </Text>
          <Text fz="xs" lh="xs" p={0}>
            –ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç, —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ä–∞—Å—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö
            –≤ 2025 –≥–æ–¥—É.
          </Text>
          <Text fz="xs" lh="xs">
            –¢—ã –ø–æ–ø–∞–ª–∞ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è üòç
          </Text>
          <Text fz="xs" lh="xs">
            –Ø –∑–∞–ø–∏—Å–∞–ª–∞ –¥–ª—è —Ç–µ–±—è —Å—É–ø–µ—Ä –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —É—Ä–æ–∫: "–ö–∞–∫ –≤–µ—Å—Ç–∏ –±–ª–æ–≥ –∏
            –ø—Ä–æ–¥–∞–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º, —ç–∑–æ—Ç–µ—Ä–∏–∫–∞–º –∏ –∫—Ä–µ–∞—Ç–æ—Ä–∞–º –≤ 2025 –≥–æ–¥—É" üåü
          </Text>
          <Text fz="xs" lh="xs">
            –ù–æ –ø—Ä–µ–∂–¥–µ —á–µ–º —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –µ–≥–æ, –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ
            –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –º—ã –ø–æ–±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å üëá
          </Text>
        </Group>
      </EditorNode.BodyContainer>
      <EditorNode.OutputHandle id="then2">
        <Button.Group>
          <Button.GroupSection variant="default" size="xs" w="100%">
            –•–æ—Ä–æ—à–æ
          </Button.GroupSection>
        </Button.Group>
      </EditorNode.OutputHandle>
      <EditorNode.OutputHandle text="If no replay, then" id="then" altHandle />
    </EditorNode>
  );
}
