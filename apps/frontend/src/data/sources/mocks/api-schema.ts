/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["accountsFindAllV1"];
        put?: never;
        post: operations["accountsCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get: operations["accountsFindOneV1"];
        put?: never;
        post?: never;
        delete: operations["accountsRemoveV1"];
        options?: never;
        head?: never;
        patch: operations["accountsUpdateV1"];
        trace?: never;
    };
    "/api/v1/channels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all channels */
        get: operations["channelsFindPaginatedV1"];
        put?: never;
        /** Create a new channel */
        post: operations["channelsCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/channels/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** Get a channel by id */
        get: operations["channelsFindOneV1"];
        put?: never;
        post?: never;
        /** Delete a channel */
        delete: operations["channelsRemoveV1"];
        options?: never;
        head?: never;
        /** Update a channel */
        patch: operations["channelsUpdateV1"];
        trace?: never;
    };
    "/api/v1/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["workflowsFindAllV1"];
        put?: never;
        post: operations["workflowsCreateV1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/workflows/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        get: operations["workflowsFindOneV1"];
        put?: never;
        post?: never;
        delete: operations["workflowsRemoveV1"];
        options?: never;
        head?: never;
        patch: operations["workflowsUpdateV1"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateAccountDto: Record<string, never>;
        UpdateAccountDto: Record<string, never>;
        PaginatedDto: {
            total: number;
            limit: number;
            offset: number;
        };
        CreateChannelDto: {
            type: string;
            name: string;
            token: string;
        };
        ChannelDto: {
            id: string;
            type: string;
            name: string;
            createdAt: string;
            updatedAt: string;
        };
        PaginatedChannelsDto: {
            total: number;
            limit: number;
            offset: number;
            results: components["schemas"]["ChannelDto"][];
        };
        UpdateChannelDto: {
            name?: string;
            token?: string;
        };
        CreateWorkflowDto: Record<string, never>;
        UpdateWorkflowDto: Record<string, never>;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    accountsFindAllV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accountsCreateV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccountDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accountsFindOneV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accountsRemoveV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    accountsUpdateV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAccountDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    channelsFindPaginatedV1: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return paginated channels */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedChannelsDto"];
                };
            };
        };
    };
    channelsCreateV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateChannelDto"];
            };
        };
        responses: {
            /** @description Channel created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelDto"];
                };
            };
        };
    };
    channelsFindOneV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a channel */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelDto"];
                };
            };
        };
    };
    channelsRemoveV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Channel deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    channelsUpdateV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateChannelDto"];
            };
        };
        responses: {
            /** @description Channel updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChannelDto"];
                };
            };
        };
    };
    workflowsFindAllV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflowsCreateV1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkflowDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflowsFindOneV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflowsRemoveV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    workflowsUpdateV1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWorkflowDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum ApiPaths {
    accountsCreateV1 = "/api/v1/accounts",
    accountsFindAllV1 = "/api/v1/accounts",
    accountsFindOneV1 = "/api/v1/accounts/:id",
    accountsUpdateV1 = "/api/v1/accounts/:id",
    accountsRemoveV1 = "/api/v1/accounts/:id",
    channelsCreateV1 = "/api/v1/channels",
    channelsFindPaginatedV1 = "/api/v1/channels",
    channelsFindOneV1 = "/api/v1/channels/:id",
    channelsUpdateV1 = "/api/v1/channels/:id",
    channelsRemoveV1 = "/api/v1/channels/:id",
    workflowsCreateV1 = "/api/v1/workflows",
    workflowsFindAllV1 = "/api/v1/workflows",
    workflowsFindOneV1 = "/api/v1/workflows/:id",
    workflowsUpdateV1 = "/api/v1/workflows/:id",
    workflowsRemoveV1 = "/api/v1/workflows/:id"
}
