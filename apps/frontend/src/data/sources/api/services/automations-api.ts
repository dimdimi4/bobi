/* tslint:disable */
/* eslint-disable */
/**
 * Autobot API
 * Autobot API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Automation } from '../models';
// @ts-ignore
import type { CreateAutomationDto } from '../models';
// @ts-ignore
import type { CreateStepDto } from '../models';
// @ts-ignore
import type { PaginatedAutomationsDto } from '../models';
// @ts-ignore
import type { UpdateAutomationDto } from '../models';
/**
 * AutomationsApi - axios parameter creator
 * @export
 */
export const AutomationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {CreateStepDto} createStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsAddStepV1: async (id: string, createStepDto: CreateStepDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsAddStepV1', 'id', id)
            // verify required parameter 'createStepDto' is not null or undefined
            assertParamExists('automationsAddStepV1', 'createStepDto', createStepDto)
            const localVarPath = `/api/v1/automations/{id}/steps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAutomationDto} createAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateV1: async (createAutomationDto: CreateAutomationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAutomationDto' is not null or undefined
            assertParamExists('automationsCreateV1', 'createAutomationDto', createAutomationDto)
            const localVarPath = `/api/v1/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAutomationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteStepV1: async (id: string, stepId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsDeleteStepV1', 'id', id)
            // verify required parameter 'stepId' is not null or undefined
            assertParamExists('automationsDeleteStepV1', 'stepId', stepId)
            const localVarPath = `/api/v1/automations/{id}/steps/{stepId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsFindOneV1', 'id', id)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindPaginatedV1: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsRemoveV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsRemoveV1', 'id', id)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepV1: async (id: string, stepId: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsUpdateStepV1', 'id', id)
            // verify required parameter 'stepId' is not null or undefined
            assertParamExists('automationsUpdateStepV1', 'stepId', stepId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('automationsUpdateStepV1', 'body', body)
            const localVarPath = `/api/v1/automations/{id}/steps/{stepId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAutomationDto} updateAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateV1: async (id: string, updateAutomationDto: UpdateAutomationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsUpdateV1', 'id', id)
            // verify required parameter 'updateAutomationDto' is not null or undefined
            assertParamExists('automationsUpdateV1', 'updateAutomationDto', updateAutomationDto)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAutomationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutomationsApi - functional programming interface
 * @export
 */
export const AutomationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutomationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {CreateStepDto} createStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsAddStepV1(id: string, createStepDto: CreateStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsAddStepV1(id, createStepDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsAddStepV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAutomationDto} createAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsCreateV1(createAutomationDto: CreateAutomationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsCreateV1(createAutomationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsDeleteStepV1(id: string, stepId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsDeleteStepV1(id, stepId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsDeleteStepV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsFindOneV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsFindOneV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsFindOneV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsFindPaginatedV1(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAutomationsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsFindPaginatedV1(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsFindPaginatedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsRemoveV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsRemoveV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsRemoveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsUpdateStepV1(id: string, stepId: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsUpdateStepV1(id, stepId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsUpdateStepV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAutomationDto} updateAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsUpdateV1(id: string, updateAutomationDto: UpdateAutomationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Automation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsUpdateV1(id, updateAutomationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AutomationsApi - factory interface
 * @export
 */
export const AutomationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutomationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {CreateStepDto} createStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsAddStepV1(id: string, createStepDto: CreateStepDto, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsAddStepV1(id, createStepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAutomationDto} createAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateV1(createAutomationDto: CreateAutomationDto, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsCreateV1(createAutomationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteStepV1(id: string, stepId: string, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsDeleteStepV1(id, stepId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneV1(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsFindOneV1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindPaginatedV1(offset?: number, limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAutomationsDto> {
            return localVarFp.automationsFindPaginatedV1(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsRemoveV1(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsRemoveV1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepV1(id: string, stepId: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsUpdateStepV1(id, stepId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAutomationDto} updateAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateV1(id: string, updateAutomationDto: UpdateAutomationDto, options?: RawAxiosRequestConfig): AxiosPromise<Automation> {
            return localVarFp.automationsUpdateV1(id, updateAutomationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutomationsApi - object-oriented interface
 * @export
 * @class AutomationsApi
 * @extends {BaseAPI}
 */
export class AutomationsApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {CreateStepDto} createStepDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsAddStepV1(id: string, createStepDto: CreateStepDto, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsAddStepV1(id, createStepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAutomationDto} createAutomationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsCreateV1(createAutomationDto: CreateAutomationDto, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsCreateV1(createAutomationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} stepId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsDeleteStepV1(id: string, stepId: string, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsDeleteStepV1(id, stepId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsFindOneV1(id: string, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsFindOneV1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsFindPaginatedV1(offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsFindPaginatedV1(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsRemoveV1(id: string, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsRemoveV1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} stepId 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsUpdateStepV1(id: string, stepId: string, body: object, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsUpdateStepV1(id, stepId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateAutomationDto} updateAutomationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsUpdateV1(id: string, updateAutomationDto: UpdateAutomationDto, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsUpdateV1(id, updateAutomationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

