/* tslint:disable */
/* eslint-disable */
/**
 * Autobot API
 * Autobot API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AutomationBaseDto } from '../models';
// @ts-ignore
import type { AutomationConnection } from '../models';
// @ts-ignore
import type { AutomationDto } from '../models';
// @ts-ignore
import type { AutomationOverviewDto } from '../models';
// @ts-ignore
import type { AutomationTask } from '../models';
// @ts-ignore
import type { AutomationsPaginatedDto } from '../models';
// @ts-ignore
import type { CreateAutomationDto } from '../models';
// @ts-ignore
import type { CreateStepDto } from '../models';
// @ts-ignore
import type { DeleteConnectionsDto } from '../models';
// @ts-ignore
import type { DeleteStepsDto } from '../models';
// @ts-ignore
import type { UpdateAutomationDto } from '../models';
// @ts-ignore
import type { UpdateStepsPositionsDto } from '../models';
/**
 * AutomationsApi - axios parameter creator
 * @export
 */
export const AutomationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AutomationConnection} automationConnection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateConnectionV1: async (id: string, automationConnection: AutomationConnection, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsCreateConnectionV1', 'id', id)
            // verify required parameter 'automationConnection' is not null or undefined
            assertParamExists('automationsCreateConnectionV1', 'automationConnection', automationConnection)
            const localVarPath = `/api/v1/automations/{id}/connections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(automationConnection, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateStepDto} createStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateStepV1: async (id: string, createStepDto: CreateStepDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsCreateStepV1', 'id', id)
            // verify required parameter 'createStepDto' is not null or undefined
            assertParamExists('automationsCreateStepV1', 'createStepDto', createStepDto)
            const localVarPath = `/api/v1/automations/{id}/steps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStepDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAutomationDto} createAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateV1: async (createAutomationDto: CreateAutomationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAutomationDto' is not null or undefined
            assertParamExists('automationsCreateV1', 'createAutomationDto', createAutomationDto)
            const localVarPath = `/api/v1/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAutomationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteConnectionsDto} deleteConnectionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteConnectionsV1: async (id: string, deleteConnectionsDto: DeleteConnectionsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsDeleteConnectionsV1', 'id', id)
            // verify required parameter 'deleteConnectionsDto' is not null or undefined
            assertParamExists('automationsDeleteConnectionsV1', 'deleteConnectionsDto', deleteConnectionsDto)
            const localVarPath = `/api/v1/automations/{id}/connections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteConnectionsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteStepsDto} deleteStepsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteStepsV1: async (id: string, deleteStepsDto: DeleteStepsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsDeleteStepsV1', 'id', id)
            // verify required parameter 'deleteStepsDto' is not null or undefined
            assertParamExists('automationsDeleteStepsV1', 'deleteStepsDto', deleteStepsDto)
            const localVarPath = `/api/v1/automations/{id}/steps`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteStepsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneForUpdateV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsFindOneForUpdateV1', 'id', id)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneOverviewV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsFindOneOverviewV1', 'id', id)
            const localVarPath = `/api/v1/automations/{id}/overview`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsListPaginatedV1: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/automations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsRemoveV1: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsRemoveV1', 'id', id)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {AutomationTask} automationTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepTaskV1: async (id: string, stepId: string, automationTask: AutomationTask, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsUpdateStepTaskV1', 'id', id)
            // verify required parameter 'stepId' is not null or undefined
            assertParamExists('automationsUpdateStepTaskV1', 'stepId', stepId)
            // verify required parameter 'automationTask' is not null or undefined
            assertParamExists('automationsUpdateStepTaskV1', 'automationTask', automationTask)
            const localVarPath = `/api/v1/automations/{id}/steps/{stepId}/task`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"stepId"}}`, encodeURIComponent(String(stepId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(automationTask, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStepsPositionsDto} updateStepsPositionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepsPositionsV1: async (id: string, updateStepsPositionsDto: UpdateStepsPositionsDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsUpdateStepsPositionsV1', 'id', id)
            // verify required parameter 'updateStepsPositionsDto' is not null or undefined
            assertParamExists('automationsUpdateStepsPositionsV1', 'updateStepsPositionsDto', updateStepsPositionsDto)
            const localVarPath = `/api/v1/automations/{id}/update-steps-positions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateStepsPositionsDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAutomationDto} updateAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateV1: async (id: string, updateAutomationDto: UpdateAutomationDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('automationsUpdateV1', 'id', id)
            // verify required parameter 'updateAutomationDto' is not null or undefined
            assertParamExists('automationsUpdateV1', 'updateAutomationDto', updateAutomationDto)
            const localVarPath = `/api/v1/automations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAutomationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutomationsApi - functional programming interface
 * @export
 */
export const AutomationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AutomationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AutomationConnection} automationConnection 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsCreateConnectionV1(id: string, automationConnection: AutomationConnection, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsCreateConnectionV1(id, automationConnection, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsCreateConnectionV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {CreateStepDto} createStepDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsCreateStepV1(id: string, createStepDto: CreateStepDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsCreateStepV1(id, createStepDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsCreateStepV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateAutomationDto} createAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsCreateV1(createAutomationDto: CreateAutomationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsCreateV1(createAutomationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsCreateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteConnectionsDto} deleteConnectionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsDeleteConnectionsV1(id: string, deleteConnectionsDto: DeleteConnectionsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsDeleteConnectionsV1(id, deleteConnectionsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsDeleteConnectionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteStepsDto} deleteStepsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsDeleteStepsV1(id: string, deleteStepsDto: DeleteStepsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsDeleteStepsV1(id, deleteStepsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsDeleteStepsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsFindOneForUpdateV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsFindOneForUpdateV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsFindOneForUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsFindOneOverviewV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationOverviewDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsFindOneOverviewV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsFindOneOverviewV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsListPaginatedV1(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationsPaginatedDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsListPaginatedV1(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsListPaginatedV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsRemoveV1(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsRemoveV1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsRemoveV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} stepId 
         * @param {AutomationTask} automationTask 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsUpdateStepTaskV1(id: string, stepId: string, automationTask: AutomationTask, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsUpdateStepTaskV1(id, stepId, automationTask, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsUpdateStepTaskV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateStepsPositionsDto} updateStepsPositionsDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsUpdateStepsPositionsV1(id: string, updateStepsPositionsDto: UpdateStepsPositionsDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsUpdateStepsPositionsV1(id, updateStepsPositionsDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsUpdateStepsPositionsV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAutomationDto} updateAutomationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async automationsUpdateV1(id: string, updateAutomationDto: UpdateAutomationDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AutomationBaseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.automationsUpdateV1(id, updateAutomationDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AutomationsApi.automationsUpdateV1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AutomationsApi - factory interface
 * @export
 */
export const AutomationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AutomationsApiFp(configuration)
    return {
        /**
         * 
         * @param {AutomationsApiAutomationsCreateConnectionV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateConnectionV1(requestParameters: AutomationsApiAutomationsCreateConnectionV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsCreateConnectionV1(requestParameters.id, requestParameters.automationConnection, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsCreateStepV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateStepV1(requestParameters: AutomationsApiAutomationsCreateStepV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsCreateStepV1(requestParameters.id, requestParameters.createStepDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsCreateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsCreateV1(requestParameters: AutomationsApiAutomationsCreateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsCreateV1(requestParameters.createAutomationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsDeleteConnectionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteConnectionsV1(requestParameters: AutomationsApiAutomationsDeleteConnectionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsDeleteConnectionsV1(requestParameters.id, requestParameters.deleteConnectionsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsDeleteStepsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsDeleteStepsV1(requestParameters: AutomationsApiAutomationsDeleteStepsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsDeleteStepsV1(requestParameters.id, requestParameters.deleteStepsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsFindOneForUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneForUpdateV1(requestParameters: AutomationsApiAutomationsFindOneForUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsFindOneForUpdateV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsFindOneOverviewV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsFindOneOverviewV1(requestParameters: AutomationsApiAutomationsFindOneOverviewV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationOverviewDto> {
            return localVarFp.automationsFindOneOverviewV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsListPaginatedV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsListPaginatedV1(requestParameters: AutomationsApiAutomationsListPaginatedV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<AutomationsPaginatedDto> {
            return localVarFp.automationsListPaginatedV1(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsRemoveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsRemoveV1(requestParameters: AutomationsApiAutomationsRemoveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.automationsRemoveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsUpdateStepTaskV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepTaskV1(requestParameters: AutomationsApiAutomationsUpdateStepTaskV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsUpdateStepTaskV1(requestParameters.id, requestParameters.stepId, requestParameters.automationTask, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsUpdateStepsPositionsV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateStepsPositionsV1(requestParameters: AutomationsApiAutomationsUpdateStepsPositionsV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationDto> {
            return localVarFp.automationsUpdateStepsPositionsV1(requestParameters.id, requestParameters.updateStepsPositionsDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AutomationsApiAutomationsUpdateV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        automationsUpdateV1(requestParameters: AutomationsApiAutomationsUpdateV1Request, options?: RawAxiosRequestConfig): AxiosPromise<AutomationBaseDto> {
            return localVarFp.automationsUpdateV1(requestParameters.id, requestParameters.updateAutomationDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for automationsCreateConnectionV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsCreateConnectionV1Request
 */
export interface AutomationsApiAutomationsCreateConnectionV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsCreateConnectionV1
     */
    readonly id: string

    /**
     * 
     * @type {AutomationConnection}
     * @memberof AutomationsApiAutomationsCreateConnectionV1
     */
    readonly automationConnection: AutomationConnection
}

/**
 * Request parameters for automationsCreateStepV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsCreateStepV1Request
 */
export interface AutomationsApiAutomationsCreateStepV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsCreateStepV1
     */
    readonly id: string

    /**
     * 
     * @type {CreateStepDto}
     * @memberof AutomationsApiAutomationsCreateStepV1
     */
    readonly createStepDto: CreateStepDto
}

/**
 * Request parameters for automationsCreateV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsCreateV1Request
 */
export interface AutomationsApiAutomationsCreateV1Request {
    /**
     * 
     * @type {CreateAutomationDto}
     * @memberof AutomationsApiAutomationsCreateV1
     */
    readonly createAutomationDto: CreateAutomationDto
}

/**
 * Request parameters for automationsDeleteConnectionsV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsDeleteConnectionsV1Request
 */
export interface AutomationsApiAutomationsDeleteConnectionsV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsDeleteConnectionsV1
     */
    readonly id: string

    /**
     * 
     * @type {DeleteConnectionsDto}
     * @memberof AutomationsApiAutomationsDeleteConnectionsV1
     */
    readonly deleteConnectionsDto: DeleteConnectionsDto
}

/**
 * Request parameters for automationsDeleteStepsV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsDeleteStepsV1Request
 */
export interface AutomationsApiAutomationsDeleteStepsV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsDeleteStepsV1
     */
    readonly id: string

    /**
     * 
     * @type {DeleteStepsDto}
     * @memberof AutomationsApiAutomationsDeleteStepsV1
     */
    readonly deleteStepsDto: DeleteStepsDto
}

/**
 * Request parameters for automationsFindOneForUpdateV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsFindOneForUpdateV1Request
 */
export interface AutomationsApiAutomationsFindOneForUpdateV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsFindOneForUpdateV1
     */
    readonly id: string
}

/**
 * Request parameters for automationsFindOneOverviewV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsFindOneOverviewV1Request
 */
export interface AutomationsApiAutomationsFindOneOverviewV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsFindOneOverviewV1
     */
    readonly id: string
}

/**
 * Request parameters for automationsListPaginatedV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsListPaginatedV1Request
 */
export interface AutomationsApiAutomationsListPaginatedV1Request {
    /**
     * 
     * @type {number}
     * @memberof AutomationsApiAutomationsListPaginatedV1
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof AutomationsApiAutomationsListPaginatedV1
     */
    readonly limit?: number
}

/**
 * Request parameters for automationsRemoveV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsRemoveV1Request
 */
export interface AutomationsApiAutomationsRemoveV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsRemoveV1
     */
    readonly id: string
}

/**
 * Request parameters for automationsUpdateStepTaskV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsUpdateStepTaskV1Request
 */
export interface AutomationsApiAutomationsUpdateStepTaskV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsUpdateStepTaskV1
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsUpdateStepTaskV1
     */
    readonly stepId: string

    /**
     * 
     * @type {AutomationTask}
     * @memberof AutomationsApiAutomationsUpdateStepTaskV1
     */
    readonly automationTask: AutomationTask
}

/**
 * Request parameters for automationsUpdateStepsPositionsV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsUpdateStepsPositionsV1Request
 */
export interface AutomationsApiAutomationsUpdateStepsPositionsV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsUpdateStepsPositionsV1
     */
    readonly id: string

    /**
     * 
     * @type {UpdateStepsPositionsDto}
     * @memberof AutomationsApiAutomationsUpdateStepsPositionsV1
     */
    readonly updateStepsPositionsDto: UpdateStepsPositionsDto
}

/**
 * Request parameters for automationsUpdateV1 operation in AutomationsApi.
 * @export
 * @interface AutomationsApiAutomationsUpdateV1Request
 */
export interface AutomationsApiAutomationsUpdateV1Request {
    /**
     * 
     * @type {string}
     * @memberof AutomationsApiAutomationsUpdateV1
     */
    readonly id: string

    /**
     * 
     * @type {UpdateAutomationDto}
     * @memberof AutomationsApiAutomationsUpdateV1
     */
    readonly updateAutomationDto: UpdateAutomationDto
}

/**
 * AutomationsApi - object-oriented interface
 * @export
 * @class AutomationsApi
 * @extends {BaseAPI}
 */
export class AutomationsApi extends BaseAPI {
    /**
     * 
     * @param {AutomationsApiAutomationsCreateConnectionV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsCreateConnectionV1(requestParameters: AutomationsApiAutomationsCreateConnectionV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsCreateConnectionV1(requestParameters.id, requestParameters.automationConnection, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsCreateStepV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsCreateStepV1(requestParameters: AutomationsApiAutomationsCreateStepV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsCreateStepV1(requestParameters.id, requestParameters.createStepDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsCreateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsCreateV1(requestParameters: AutomationsApiAutomationsCreateV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsCreateV1(requestParameters.createAutomationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsDeleteConnectionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsDeleteConnectionsV1(requestParameters: AutomationsApiAutomationsDeleteConnectionsV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsDeleteConnectionsV1(requestParameters.id, requestParameters.deleteConnectionsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsDeleteStepsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsDeleteStepsV1(requestParameters: AutomationsApiAutomationsDeleteStepsV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsDeleteStepsV1(requestParameters.id, requestParameters.deleteStepsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsFindOneForUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsFindOneForUpdateV1(requestParameters: AutomationsApiAutomationsFindOneForUpdateV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsFindOneForUpdateV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsFindOneOverviewV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsFindOneOverviewV1(requestParameters: AutomationsApiAutomationsFindOneOverviewV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsFindOneOverviewV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsListPaginatedV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsListPaginatedV1(requestParameters: AutomationsApiAutomationsListPaginatedV1Request = {}, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsListPaginatedV1(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsRemoveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsRemoveV1(requestParameters: AutomationsApiAutomationsRemoveV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsRemoveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsUpdateStepTaskV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsUpdateStepTaskV1(requestParameters: AutomationsApiAutomationsUpdateStepTaskV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsUpdateStepTaskV1(requestParameters.id, requestParameters.stepId, requestParameters.automationTask, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsUpdateStepsPositionsV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsUpdateStepsPositionsV1(requestParameters: AutomationsApiAutomationsUpdateStepsPositionsV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsUpdateStepsPositionsV1(requestParameters.id, requestParameters.updateStepsPositionsDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AutomationsApiAutomationsUpdateV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutomationsApi
     */
    public automationsUpdateV1(requestParameters: AutomationsApiAutomationsUpdateV1Request, options?: RawAxiosRequestConfig) {
        return AutomationsApiFp(this.configuration).automationsUpdateV1(requestParameters.id, requestParameters.updateAutomationDto, options).then((request) => request(this.axios, this.basePath));
    }
}

