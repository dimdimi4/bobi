/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as ChannelsRouteImport } from './app/routes/channels/route'
import { Route as AutomationsRouteImport } from './app/routes/automations/route'
import { Route as AutomationEditorRouteImport } from './app/routes/automation-editor/route'
import { Route as IndexImport } from './app/routes/index'
import { Route as ChannelsIndexImport } from './app/routes/channels/index'
import { Route as AutomationsIndexImport } from './app/routes/automations/index'
import { Route as ChannelsAddChannelImport } from './app/routes/channels/add-channel'
import { Route as AutomationEditorIdImport } from './app/routes/automation-editor/$id'
import { Route as AutomationsIdViewImport } from './app/routes/automations/$id.view'

// Create/Update Routes

const ChannelsRouteRoute = ChannelsRouteImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRoute,
} as any)

const AutomationsRouteRoute = AutomationsRouteImport.update({
  id: '/automations',
  path: '/automations',
  getParentRoute: () => rootRoute,
} as any)

const AutomationEditorRouteRoute = AutomationEditorRouteImport.update({
  id: '/automation-editor',
  path: '/automation-editor',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsIndexRoute = ChannelsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChannelsRouteRoute,
} as any)

const AutomationsIndexRoute = AutomationsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AutomationsRouteRoute,
} as any)

const ChannelsAddChannelRoute = ChannelsAddChannelImport.update({
  id: '/add-channel',
  path: '/add-channel',
  getParentRoute: () => ChannelsRouteRoute,
} as any)

const AutomationEditorIdRoute = AutomationEditorIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => AutomationEditorRouteRoute,
} as any)

const AutomationsIdViewRoute = AutomationsIdViewImport.update({
  id: '/$id/view',
  path: '/$id/view',
  getParentRoute: () => AutomationsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/automation-editor': {
      id: '/automation-editor'
      path: '/automation-editor'
      fullPath: '/automation-editor'
      preLoaderRoute: typeof AutomationEditorRouteImport
      parentRoute: typeof rootRoute
    }
    '/automations': {
      id: '/automations'
      path: '/automations'
      fullPath: '/automations'
      preLoaderRoute: typeof AutomationsRouteImport
      parentRoute: typeof rootRoute
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsRouteImport
      parentRoute: typeof rootRoute
    }
    '/automation-editor/$id': {
      id: '/automation-editor/$id'
      path: '/$id'
      fullPath: '/automation-editor/$id'
      preLoaderRoute: typeof AutomationEditorIdImport
      parentRoute: typeof AutomationEditorRouteImport
    }
    '/channels/add-channel': {
      id: '/channels/add-channel'
      path: '/add-channel'
      fullPath: '/channels/add-channel'
      preLoaderRoute: typeof ChannelsAddChannelImport
      parentRoute: typeof ChannelsRouteImport
    }
    '/automations/': {
      id: '/automations/'
      path: '/'
      fullPath: '/automations/'
      preLoaderRoute: typeof AutomationsIndexImport
      parentRoute: typeof AutomationsRouteImport
    }
    '/channels/': {
      id: '/channels/'
      path: '/'
      fullPath: '/channels/'
      preLoaderRoute: typeof ChannelsIndexImport
      parentRoute: typeof ChannelsRouteImport
    }
    '/automations/$id/view': {
      id: '/automations/$id/view'
      path: '/$id/view'
      fullPath: '/automations/$id/view'
      preLoaderRoute: typeof AutomationsIdViewImport
      parentRoute: typeof AutomationsRouteImport
    }
  }
}

// Create and export the route tree

interface AutomationEditorRouteRouteChildren {
  AutomationEditorIdRoute: typeof AutomationEditorIdRoute
}

const AutomationEditorRouteRouteChildren: AutomationEditorRouteRouteChildren = {
  AutomationEditorIdRoute: AutomationEditorIdRoute,
}

const AutomationEditorRouteRouteWithChildren =
  AutomationEditorRouteRoute._addFileChildren(
    AutomationEditorRouteRouteChildren,
  )

interface AutomationsRouteRouteChildren {
  AutomationsIndexRoute: typeof AutomationsIndexRoute
  AutomationsIdViewRoute: typeof AutomationsIdViewRoute
}

const AutomationsRouteRouteChildren: AutomationsRouteRouteChildren = {
  AutomationsIndexRoute: AutomationsIndexRoute,
  AutomationsIdViewRoute: AutomationsIdViewRoute,
}

const AutomationsRouteRouteWithChildren =
  AutomationsRouteRoute._addFileChildren(AutomationsRouteRouteChildren)

interface ChannelsRouteRouteChildren {
  ChannelsAddChannelRoute: typeof ChannelsAddChannelRoute
  ChannelsIndexRoute: typeof ChannelsIndexRoute
}

const ChannelsRouteRouteChildren: ChannelsRouteRouteChildren = {
  ChannelsAddChannelRoute: ChannelsAddChannelRoute,
  ChannelsIndexRoute: ChannelsIndexRoute,
}

const ChannelsRouteRouteWithChildren = ChannelsRouteRoute._addFileChildren(
  ChannelsRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/automation-editor': typeof AutomationEditorRouteRouteWithChildren
  '/automations': typeof AutomationsRouteRouteWithChildren
  '/channels': typeof ChannelsRouteRouteWithChildren
  '/automation-editor/$id': typeof AutomationEditorIdRoute
  '/channels/add-channel': typeof ChannelsAddChannelRoute
  '/automations/': typeof AutomationsIndexRoute
  '/channels/': typeof ChannelsIndexRoute
  '/automations/$id/view': typeof AutomationsIdViewRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/automation-editor': typeof AutomationEditorRouteRouteWithChildren
  '/automation-editor/$id': typeof AutomationEditorIdRoute
  '/channels/add-channel': typeof ChannelsAddChannelRoute
  '/automations': typeof AutomationsIndexRoute
  '/channels': typeof ChannelsIndexRoute
  '/automations/$id/view': typeof AutomationsIdViewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/automation-editor': typeof AutomationEditorRouteRouteWithChildren
  '/automations': typeof AutomationsRouteRouteWithChildren
  '/channels': typeof ChannelsRouteRouteWithChildren
  '/automation-editor/$id': typeof AutomationEditorIdRoute
  '/channels/add-channel': typeof ChannelsAddChannelRoute
  '/automations/': typeof AutomationsIndexRoute
  '/channels/': typeof ChannelsIndexRoute
  '/automations/$id/view': typeof AutomationsIdViewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/automation-editor'
    | '/automations'
    | '/channels'
    | '/automation-editor/$id'
    | '/channels/add-channel'
    | '/automations/'
    | '/channels/'
    | '/automations/$id/view'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/automation-editor'
    | '/automation-editor/$id'
    | '/channels/add-channel'
    | '/automations'
    | '/channels'
    | '/automations/$id/view'
  id:
    | '__root__'
    | '/'
    | '/automation-editor'
    | '/automations'
    | '/channels'
    | '/automation-editor/$id'
    | '/channels/add-channel'
    | '/automations/'
    | '/channels/'
    | '/automations/$id/view'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AutomationEditorRouteRoute: typeof AutomationEditorRouteRouteWithChildren
  AutomationsRouteRoute: typeof AutomationsRouteRouteWithChildren
  ChannelsRouteRoute: typeof ChannelsRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AutomationEditorRouteRoute: AutomationEditorRouteRouteWithChildren,
  AutomationsRouteRoute: AutomationsRouteRouteWithChildren,
  ChannelsRouteRoute: ChannelsRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/automation-editor",
        "/automations",
        "/channels"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/automation-editor": {
      "filePath": "automation-editor/route.tsx",
      "children": [
        "/automation-editor/$id"
      ]
    },
    "/automations": {
      "filePath": "automations/route.tsx",
      "children": [
        "/automations/",
        "/automations/$id/view"
      ]
    },
    "/channels": {
      "filePath": "channels/route.tsx",
      "children": [
        "/channels/add-channel",
        "/channels/"
      ]
    },
    "/automation-editor/$id": {
      "filePath": "automation-editor/$id.tsx",
      "parent": "/automation-editor"
    },
    "/channels/add-channel": {
      "filePath": "channels/add-channel.tsx",
      "parent": "/channels"
    },
    "/automations/": {
      "filePath": "automations/index.tsx",
      "parent": "/automations"
    },
    "/channels/": {
      "filePath": "channels/index.tsx",
      "parent": "/channels"
    },
    "/automations/$id/view": {
      "filePath": "automations/$id.view.tsx",
      "parent": "/automations"
    }
  }
}
ROUTE_MANIFEST_END */
