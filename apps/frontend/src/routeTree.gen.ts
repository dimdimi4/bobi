/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CreateChannelImport } from './routes/create-channel'
import { Route as ChannelsImport } from './routes/channels'
import { Route as IndexImport } from './routes/index'
import { Route as AutomationIndexImport } from './routes/automation/index'
import { Route as AutomationAddImport } from './routes/automation/add'

// Create/Update Routes

const CreateChannelRoute = CreateChannelImport.update({
  id: '/create-channel',
  path: '/create-channel',
  getParentRoute: () => rootRoute,
} as any)

const ChannelsRoute = ChannelsImport.update({
  id: '/channels',
  path: '/channels',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AutomationIndexRoute = AutomationIndexImport.update({
  id: '/automation/',
  path: '/automation/',
  getParentRoute: () => rootRoute,
} as any)

const AutomationAddRoute = AutomationAddImport.update({
  id: '/automation/add',
  path: '/automation/add',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/channels': {
      id: '/channels'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsImport
      parentRoute: typeof rootRoute
    }
    '/create-channel': {
      id: '/create-channel'
      path: '/create-channel'
      fullPath: '/create-channel'
      preLoaderRoute: typeof CreateChannelImport
      parentRoute: typeof rootRoute
    }
    '/automation/add': {
      id: '/automation/add'
      path: '/automation/add'
      fullPath: '/automation/add'
      preLoaderRoute: typeof AutomationAddImport
      parentRoute: typeof rootRoute
    }
    '/automation/': {
      id: '/automation/'
      path: '/automation'
      fullPath: '/automation'
      preLoaderRoute: typeof AutomationIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/create-channel': typeof CreateChannelRoute
  '/automation/add': typeof AutomationAddRoute
  '/automation': typeof AutomationIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/create-channel': typeof CreateChannelRoute
  '/automation/add': typeof AutomationAddRoute
  '/automation': typeof AutomationIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/channels': typeof ChannelsRoute
  '/create-channel': typeof CreateChannelRoute
  '/automation/add': typeof AutomationAddRoute
  '/automation/': typeof AutomationIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/channels'
    | '/create-channel'
    | '/automation/add'
    | '/automation'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/channels' | '/create-channel' | '/automation/add' | '/automation'
  id:
    | '__root__'
    | '/'
    | '/channels'
    | '/create-channel'
    | '/automation/add'
    | '/automation/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChannelsRoute: typeof ChannelsRoute
  CreateChannelRoute: typeof CreateChannelRoute
  AutomationAddRoute: typeof AutomationAddRoute
  AutomationIndexRoute: typeof AutomationIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChannelsRoute: ChannelsRoute,
  CreateChannelRoute: CreateChannelRoute,
  AutomationAddRoute: AutomationAddRoute,
  AutomationIndexRoute: AutomationIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/channels",
        "/create-channel",
        "/automation/add",
        "/automation/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/channels": {
      "filePath": "channels.tsx"
    },
    "/create-channel": {
      "filePath": "create-channel.tsx"
    },
    "/automation/add": {
      "filePath": "automation/add.tsx"
    },
    "/automation/": {
      "filePath": "automation/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
